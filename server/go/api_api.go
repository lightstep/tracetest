/*
 * Project X
 *
 * OpenAPI definition for project X endpoint and resources
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApiApiController binds http requests to an api service and writes the service results to the http response
type ApiApiController struct {
	service      ApiApiServicer
	errorHandler ErrorHandler
}

// ApiApiOption for how the controller is set up.
type ApiApiOption func(*ApiApiController)

// WithApiApiErrorHandler inject ErrorHandler into controller
func WithApiApiErrorHandler(h ErrorHandler) ApiApiOption {
	return func(c *ApiApiController) {
		c.errorHandler = h
	}
}

// NewApiApiController creates a default api controller
func NewApiApiController(s ApiApiServicer, opts ...ApiApiOption) Router {
	controller := &ApiApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the ApiApiController
func (c *ApiApiController) Routes() Routes {
	return Routes{
		{
			"CreateAssertion",
			strings.ToUpper("Post"),
			"/test/{id}/assertions",
			c.CreateAssertion,
		},
		{
			"CreateTest",
			strings.ToUpper("Post"),
			"/tests",
			c.CreateTest,
		},
		{
			"GetAssertions",
			strings.ToUpper("Get"),
			"/test/{id}/assertions",
			c.GetAssertions,
		},
		{
			"GetTests",
			strings.ToUpper("Get"),
			"/tests",
			c.GetTests,
		},
		{
			"TestsIdResultsGet",
			strings.ToUpper("Get"),
			"/tests/{id}/results",
			c.TestsIdResultsGet,
		},
		{
			"TestsTestidResultsIdGet",
			strings.ToUpper("Get"),
			"/tests/{testid}/results/{id}",
			c.TestsTestidResultsIdGet,
		},
		{
			"TestsTestidResultsIdTraceGet",
			strings.ToUpper("Get"),
			"/tests/{testid}/results/{id}/trace",
			c.TestsTestidResultsIdTraceGet,
		},
		{
			"TestsTestidRunPost",
			strings.ToUpper("Post"),
			"/tests/{testid}/run",
			c.TestsTestidRunPost,
		},
	}
}

// CreateAssertion -
func (c *ApiApiController) CreateAssertion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	assertionParam := Assertion{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&assertionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAssertionRequired(assertionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAssertion(r.Context(), idParam, assertionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateTest - Create new test
func (c *ApiApiController) CreateTest(w http.ResponseWriter, r *http.Request) {
	testParam := Test{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&testParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTestRequired(testParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTest(r.Context(), testParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAssertions -
func (c *ApiApiController) GetAssertions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	result, err := c.service.GetAssertions(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTests - Create new test
func (c *ApiApiController) GetTests(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTests(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TestsIdResultsGet -
func (c *ApiApiController) TestsIdResultsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	result, err := c.service.TestsIdResultsGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TestsTestidResultsIdGet -
func (c *ApiApiController) TestsTestidResultsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testidParam := params["testid"]

	idParam := params["id"]

	result, err := c.service.TestsTestidResultsIdGet(r.Context(), testidParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TestsTestidResultsIdTraceGet -
func (c *ApiApiController) TestsTestidResultsIdTraceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testidParam := params["testid"]

	idParam := params["id"]

	result, err := c.service.TestsTestidResultsIdTraceGet(r.Context(), testidParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TestsTestidRunPost -
func (c *ApiApiController) TestsTestidRunPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testidParam := params["testid"]

	result, err := c.service.TestsTestidRunPost(r.Context(), testidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
