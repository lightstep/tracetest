// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GIT_USER_ID/GIT_REPO_ID/go (interfaces: TestExecutor)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	openapi "github.com/GIT_USER_ID/GIT_REPO_ID/go"
	gomock "github.com/golang/mock/gomock"
	trace "go.opentelemetry.io/otel/trace"
)

// MockTestExecutor is a mock of TestExecutor interface.
type MockTestExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTestExecutorMockRecorder
}

// MockTestExecutorMockRecorder is the mock recorder for MockTestExecutor.
type MockTestExecutorMockRecorder struct {
	mock *MockTestExecutor
}

// NewMockTestExecutor creates a new mock instance.
func NewMockTestExecutor(ctrl *gomock.Controller) *MockTestExecutor {
	mock := &MockTestExecutor{ctrl: ctrl}
	mock.recorder = &MockTestExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestExecutor) EXPECT() *MockTestExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTestExecutor) Execute(arg0 *openapi.Test, arg1 trace.TraceID, arg2 trace.SpanID) (*openapi.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(*openapi.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockTestExecutorMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTestExecutor)(nil).Execute), arg0, arg1, arg2)
}
